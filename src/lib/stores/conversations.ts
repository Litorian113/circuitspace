import { writable } from 'svelte/store';

export interface DelayedStep {
	id: string;
	content: string;
	delay: number; // in milliseconds
	isCompleted?: boolean;
}

export interface ConversationStep {
	id: string;
	type: 'ai' | 'user' | 'system';
	content: string;
	componentImages?: string[];
	codeGenerated?: string;
	nextSteps?: string[];
	userResponse?: string;
	isCompleted?: boolean;
	showTutorialButton?: boolean;
	showWorkspaceButtons?: boolean;
	showProjectButtons?: boolean;
	showRealTableButton?: boolean; // Neuer Button-Typ nur f√ºr "An den Tisch"
	delayedSteps?: DelayedStep[];
}

export interface Conversation {
	id: string;
	projectType: string;
	title: string;
	description: string;
	currentStep: number;
	steps: ConversationStep[];
	components: string[];
	isCompleted: boolean;
}

// Arduino Leonardo LED Dimmer Conversation
export const leonardoLedDimmerConversation: Conversation = {
	id: 'leonardo-led-dimmer',
	projectType: 'led-dimmer',
	title: 'Arduino Leonardo LED Dimmer',
	description: 'Build a LED brightness controller using an Arduino Leonardo, potentiometer, and LED',
	currentStep: 0,
	isCompleted: false,
	components: ['leonardo-keyestudio', 'breadboard', 'leuchtdiode', 'widerstand', 'poti', 'jumpercable'],
	steps: [
		{
			id: 'project-understanding',
			type: 'ai',
			content: `Ich glaube das ich habe jetzt vollst√§ndig dein Projekt verstanden. 

Wir bauen einen **LED Dimmer mit Arduino Leonardo**, bei dem:
- Ein Potentiometer die LED-Helligkeit steuert
- PWM f√ºr stufenlose Helligkeitsregelung verwendet wird
- Alle Verbindungen √ºber ein Breadboard laufen
- Ein Schutzwiderstand die LED vor √úberstrom sch√ºtzt

Hast du sonst noch Fragen zum Projekt oder k√∂nnen wir weitermachen?`,
			nextSteps: ['continue-project', 'ask-question'],
			showProjectButtons: true,
			isCompleted: false
		},
		{
			id: 'component-analysis',
			type: 'ai',
			content: `Perfekt! F√ºr dieses LED-Dimmer Projekt mit einem Arduino Leonardo ben√∂tigen Sie folgende Komponenten:

**Komponenten Liste:**

üî∏ **Arduino Leonardo (Keyestudio)** - Der Hauptcontroller
üî∏ **Breadboard** - F√ºr die Schaltungsaufbau  
üî∏ **LED (Diode)** - Die Leuchtdiode die gedimmt werden soll
üî∏ **Resistor (Widerstand)** - Schutz f√ºr die LED (220Œ© empfohlen)
üî∏ **Potentiometer** - Zur Helligkeitsregelung der LED
üî∏ **Jumper Cables** - Verbindungskabel f√ºr die Schaltung

**√úber das Projekt:**
Diese Schaltung erm√∂glicht es Ihnen, die Helligkeit einer LED stufenlos √ºber ein Potentiometer zu regulieren. Der Arduino Leonardo liest den analogen Wert des Potentiometers ein und wandelt ihn in ein PWM-Signal um, das die LED entsprechend dimmt.

**Wo m√∂chten Sie mit dem Aufbau beginnen?**`,
			componentImages: [
				'/components/leonardoKeyestudio.png',
				'/components/jumpercable.png', 
				'/components/leuchtdiode.png',
				'/components/widerstand.png',
				'/components/poti.png',
				'/components/breadboard.png'
			],
			nextSteps: ['circuit-designer', 'real-workspace'],
			showWorkspaceButtons: true,
			isCompleted: false
		},
		{
			id: 'circuit-designer-path',
			type: 'ai',
			content: `Ausgezeichnet! Sie haben die Schaltung im Circuit Designer erfolgreich aufgebaut! üéâ

Alle Pin-Verbindungen sind korrekt:
‚úÖ LED mit Schutzwiderstand an Pin 9 (PWM)
‚úÖ Potentiometer an Pin A0 (Analog Input)
‚úÖ Korrekte Stromversorgung und Ground-Verbindungen

**Jetzt k√∂nnen Sie zum praktischen Aufbau am Tisch √ºbergehen!**`,
			nextSteps: ['real-workspace-after-designer'],
			showRealTableButton: true, // Nur "An den Tisch" Button zeigen
			isCompleted: false
		},
		{
			id: 'real-workspace-steps',
			type: 'ai',
			content: `Perfekt! Lassen Sie uns Schritt f√ºr Schritt die Schaltung am Arbeitsplatz aufbauen.

**Bereiten Sie folgende Komponenten vor:**
- Arduino Leonardo
- Breadboard
- LED, Widerstand (220Œ©), Potentiometer
- Jumper Cables

Ich werde Ihnen beim Aufbau helfen und jeden Schritt verfolgen...`,
			delayedSteps: [
				{
					id: 'workspace-prep',
					content: 'üîå **Schritt 1/7:** Arduino Leonardo mit USB-Kabel an Computer angeschlossen - Erkannt! ‚úÖ',
					delay: 2000
				},
				{
					id: 'breadboard-ready', 
					content: 'üõ†Ô∏è **Schritt 2/7:** Breadboard auf dem Arbeitsplatz bereitgestellt - Erkannt! ‚úÖ',
					delay: 4000
				},
				{
					id: 'led-placement',
					content: 'üí° **Schritt 3/7:** LED in Breadboard eingesteckt (Anode l√§ngeres Bein) - Korrekt platziert! ‚úÖ',
					delay: 6000
				},
				{
					id: 'resistor-connection',
					content: '‚ö° **Schritt 4/7:** 220Œ© Widerstand zwischen LED-Kathode und GND-Rail - Verbindung hergestellt! ‚úÖ',
					delay: 8000
				},
				{
					id: 'potentiometer-placement',
					content: 'üéõÔ∏è **Schritt 5/7:** Potentiometer in Breadboard eingesteckt - Position best√§tigt! ‚úÖ',
					delay: 10000
				},
				{
					id: 'power-connections',
					content: 'üîó **Schritt 6/7:** Stromversorgung: 5V und GND vom Arduino zum Breadboard - Verbindungen aktiv! ‚úÖ',
					delay: 12000
				},
				{
					id: 'signal-connections',
					content: 'üì° **Schritt 7/7:** Signal-Verbindungen: Pin 9 ‚Üí LED, Pin A0 ‚Üí Potentiometer - Alle Pins korrekt! ‚úÖ',
					delay: 14000
				},
				{
					id: 'circuit-complete',
					content: `üéâ **Hardware-Aufbau komplett!** 

Ich habe erkannt, dass Sie die Schaltung erfolgreich verbunden haben:
‚úÖ Arduino Leonardo ‚Üí Breadboard Stromversorgung
‚úÖ LED + Widerstand ‚Üí Pin 9 (PWM-Ausgang)  
‚úÖ Potentiometer ‚Üí Pin A0 (Analog-Eingang)
‚úÖ Alle Ground-Verbindungen hergestellt

**Die Hardware ist bereit f√ºr die Programmierung!**`,
					delay: 16000
				}
			],
			nextSteps: ['start-code-tutorial'],
			showTutorialButton: false, // Wird erst nach den delayed steps angezeigt
			isCompleted: false
		},
		{
			id: 'start-code-tutorial',
			type: 'ai',
			content: `üéâ **Hardware-Aufbau erfolgreich abgeschlossen!**

Ihre LED-Dimmer Schaltung ist jetzt bereit. Alle Komponenten sind korrekt verkabelt:
- LED + Widerstand an Pin 9 (PWM)
- Potentiometer an Pin A0 (Analog)
- Stromversorgung korrekt angeschlossen

**Jetzt fehlt nur noch der Code!** 

Das Arduino ben√∂tigt die Software um die Hardware zu steuern. Sind Sie bereit f√ºr das interaktive Code-Tutorial?`,
			nextSteps: ['code-tutorial'],
			showTutorialButton: true,
			isCompleted: false
		}
	]
};

// Code Tutorial Steps f√ºr interaktive IDE-Anleitung
export interface CodeTutorialStep {
	id: string;
	title: string;
	description: string;
	code: string;
	explanation: string;
	highlight?: { start: number; end: number };
}

export const leonardoCodeTutorial: CodeTutorialStep[] = [
	{
		id: 'step-1-setup',
		title: 'Schritt 1: Grundstruktur & Kommentare',
		description: 'Lassen Sie uns mit der Grundstruktur und Dokumentation beginnen.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/`,
		explanation: 'Ein guter Code beginnt immer mit Dokumentation. Hier definieren wir was unser Projekt macht und welche Hardware verwendet wird.'
	},
	{
		id: 'step-2-pins',
		title: 'Schritt 2: Pin-Definitionen',
		description: 'Jetzt definieren wir die Hardware-Pins f√ºr unser Projekt.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)`,
		explanation: 'Mit const int definieren wir unver√§nderliche Konstanten f√ºr unsere Pins. Pin 9 unterst√ºtzt PWM (Pulsweitenmodulation) f√ºr die LED-Helligkeitssteuerung.'
	},
	{
		id: 'step-3-setup',
		title: 'Schritt 3: Setup-Funktion',
		description: 'Die setup() Funktion l√§uft einmal beim Start des Arduino.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)

void setup() {
  // Serielle Kommunikation starten f√ºr Debugging
  Serial.begin(9600);
  
  // LED Pin als Ausgang definieren
  pinMode(ledPin, OUTPUT);
  
  // Potentiometer Pin ist automatisch als Eingang konfiguriert
  Serial.println("Arduino Leonardo LED Dimmer gestartet!");
}`,
		explanation: 'Serial.begin() startet die Kommunikation zum Computer. pinMode() konfiguriert Pin 9 als Ausgang f√ºr die LED. Analog-Pins sind automatisch Eing√§nge.'
	},
	{
		id: 'step-4-loop-basic',
		title: 'Schritt 4: Grundlegende Loop-Struktur',
		description: 'Die loop() Funktion l√§uft endlos und enth√§lt unsere Hauptlogik.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)

void setup() {
  // Serielle Kommunikation starten f√ºr Debugging
  Serial.begin(9600);
  
  // LED Pin als Ausgang definieren
  pinMode(ledPin, OUTPUT);
  
  // Potentiometer Pin ist automatisch als Eingang konfiguriert
  Serial.println("Arduino Leonardo LED Dimmer gestartet!");
}

void loop() {
  // Potentiometer-Wert lesen (0-1023)
  int potValue = analogRead(potPin);
  
  // Hier kommt die Logik...
}`,
		explanation: 'analogRead() liest den analogen Wert des Potentiometers. Der Wertebereich ist 0-1023 (10-bit Aufl√∂sung).'
	},
	{
		id: 'step-5-mapping',
		title: 'Schritt 5: Werte-Mapping f√ºr PWM',
		description: 'Wir wandeln den Potentiometer-Wert in PWM-Werte f√ºr die LED um.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)

void setup() {
  // Serielle Kommunikation starten f√ºr Debugging
  Serial.begin(9600);
  
  // LED Pin als Ausgang definieren
  pinMode(ledPin, OUTPUT);
  
  // Potentiometer Pin ist automatisch als Eingang konfiguriert
  Serial.println("Arduino Leonardo LED Dimmer gestartet!");
}

void loop() {
  // Potentiometer-Wert lesen (0-1023)
  int potValue = analogRead(potPin);
  
  // Wert auf PWM-Bereich (0-255) abbilden
  int brightness = map(potValue, 0, 1023, 0, 255);
  
  // LED-Helligkeit setzen
  analogWrite(ledPin, brightness);
}`,
		explanation: 'map() wandelt den Potentiometer-Bereich (0-1023) in PWM-Bereich (0-255) um. analogWrite() steuert die LED-Helligkeit per PWM.'
	},
	{
		id: 'step-6-debugging',
		title: 'Schritt 6: Debug-Ausgabe & Timing',
		description: 'F√ºgen wir Debug-Ausgaben und optimales Timing hinzu.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)

void setup() {
  // Serielle Kommunikation starten f√ºr Debugging
  Serial.begin(9600);
  
  // LED Pin als Ausgang definieren
  pinMode(ledPin, OUTPUT);
  
  // Potentiometer Pin ist automatisch als Eingang konfiguriert
  Serial.println("Arduino Leonardo LED Dimmer gestartet!");
}

void loop() {
  // Potentiometer-Wert lesen (0-1023)
  int potValue = analogRead(potPin);
  
  // Wert auf PWM-Bereich (0-255) abbilden
  int brightness = map(potValue, 0, 1023, 0, 255);
  
  // LED-Helligkeit setzen
  analogWrite(ledPin, brightness);
  
  // Debug-Ausgabe
  Serial.print("Potentiometer: ");
  Serial.print(potValue);
  Serial.print(" | LED Helligkeit: ");
  Serial.println(brightness);
  
  // Kurze Pause f√ºr stabile Werte
  delay(50);
}`,
		explanation: 'Serial.print() zeigt die aktuellen Werte im Serial Monitor. delay(50) sorgt f√ºr stabile Werte und verhindert Spam in der Ausgabe.'
	}
];

// Store f√ºr aktuelle Konversation
export const currentConversation = writable<Conversation | null>(null);

// Store f√ºr Konversationsschritt
export const conversationStep = writable<number>(0);

// Store f√ºr aktuellen Tutorial-Schritt
export const currentTutorialStep = writable<number>(0);
export const isTutorialActive = writable<boolean>(false);

// Hilfsfunktionen
export function startConversation(conversationId: string) {
	if (conversationId === 'leonardo-led-dimmer') {
		currentConversation.set(leonardoLedDimmerConversation);
		conversationStep.set(0);
	}
}

export function nextConversationStep() {
	console.log('nextConversationStep called');
	currentConversation.update(conv => {
		if (conv && conv.currentStep < conv.steps.length - 1) {
			console.log(`Moving from step ${conv.currentStep} to ${conv.currentStep + 1}`);
			return {
				...conv,
				currentStep: conv.currentStep + 1
			};
		}
		console.log('Cannot move to next step');
		return conv;
	});
	
	conversationStep.update(step => step + 1);
}

export function markStepCompleted(stepId: string) {
	currentConversation.update(conv => {
		if (conv) {
			const updatedSteps = conv.steps.map(step => 
				step.id === stepId ? { ...step, isCompleted: true } : step
			);
			return {
				...conv,
				steps: updatedSteps
			};
		}
		return conv;
	});
}

export function resetConversation() {
	currentConversation.set(null);
	conversationStep.set(0);
}

// Funktion um zu pr√ºfen ob eine Eingabe ein vordefiniertes Projekt ist
export function detectProjectType(input: string): string | null {
	const lowerInput = input.toLowerCase();
	
	// Arduino Leonardo LED Dimmer keywords
	if (lowerInput.includes('leonardo') && 
		(lowerInput.includes('led') || lowerInput.includes('diode') || lowerInput.includes('leuchtdiode')) &&
		(lowerInput.includes('dimmer') || lowerInput.includes('helligkeit') || 
		 lowerInput.includes('potentiometer') || lowerInput.includes('brightness') || 
		 lowerInput.includes('poti') || lowerInput.includes('regulieren'))) {
		return 'leonardo-led-dimmer';
	}
	
	return null;
}

// Hilfsfunktionen f√ºr Tutorial
export function startCodeTutorial() {
	currentTutorialStep.set(0);
	isTutorialActive.set(true);
}

export function nextTutorialStep() {
	currentTutorialStep.update(step => {
		if (step < leonardoCodeTutorial.length - 1) {
			return step + 1;
		}
		return step;
	});
}

export function previousTutorialStep() {
	currentTutorialStep.update(step => {
		if (step > 0) {
			return step - 1;
		}
		return step;
	});
}

export function finishTutorial() {
	isTutorialActive.set(false);
	currentTutorialStep.set(0);
}

// Funktion um den kompletten Tutorial-Code zu generieren
export function getCompleteTutorialCode(): string {
	// Return the complete code from the last tutorial step
	const lastStep = leonardoCodeTutorial[leonardoCodeTutorial.length - 1];
	return lastStep.code;
}

// Navigation zwischen den verschiedenen Conversation Steps
export function jumpToStep(stepId: string) {
	currentConversation.update(conv => {
		if (conv) {
			const stepIndex = conv.steps.findIndex(step => step.id === stepId);
			if (stepIndex !== -1) {
				return {
					...conv,
					currentStep: stepIndex
				};
			}
		}
		return conv;
	});
}

// Button-Handler f√ºr Project-Buttons
export function handleProjectButton(action: string) {
	console.log('handleProjectButton called with action:', action);
	switch (action) {
		case 'continue':
		case 'continue-project':
			console.log('Calling nextConversationStep');
			nextConversationStep();
			break;
		case 'question':
		case 'ask-question':
			// Hier k√∂nnte ein Frage-Dialog implementiert werden
			console.log('User has a question about the project');
			break;
	}
}

// Button-Handler f√ºr Workspace-Buttons  
export function handleWorkspaceButton(action: string) {
	console.log('handleWorkspaceButton called with action:', action);
	switch (action) {
		case 'circuit-designer':
			// Wird von der Chat-Komponente direkt behandelt (switchToView)
			break;
		case 'real-table':
		case 'real-workspace':
			console.log('Jumping to real-workspace-steps');
			// Springe direkt zum real-workspace-steps Schritt
			currentConversation.update(conv => {
				if (conv) {
					const stepIndex = conv.steps.findIndex(step => step.id === 'real-workspace-steps');
					if (stepIndex !== -1) {
						conversationStep.set(stepIndex);
						return {
							...conv,
							currentStep: stepIndex
						};
					}
				}
				return conv;
			});
			break;
		case 'real-workspace-after-designer':
			nextConversationStep();
			break;
	}
}

// Store f√ºr Circuit Designer Status
export const circuitDesignerCompleted = writable<boolean>(false);

// Funktion um Circuit Designer Completion zu markieren
export function markCircuitDesignerCompleted() {
	circuitDesignerCompleted.set(true);
	// Springe direkt zum circuit-designer-path Schritt
	currentConversation.update(conv => {
		if (conv) {
			const stepIndex = conv.steps.findIndex(step => step.id === 'circuit-designer-path');
			if (stepIndex !== -1) {
				conversationStep.set(stepIndex);
				return {
					...conv,
					currentStep: stepIndex
				};
			}
		}
		return conv;
	});
}
