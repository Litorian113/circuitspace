import { writable } from 'svelte/store';

export interface ConversationStep {
	id: string;
	type: 'ai' | 'user' | 'system';
	content: string;
	componentImages?: string[];
	codeGenerated?: string;
	nextSteps?: string[];
	userResponse?: string;
	isCompleted?: boolean;
	showTutorialButton?: boolean;
}

export interface Conversation {
	id: string;
	projectType: string;
	title: string;
	description: string;
	currentStep: number;
	steps: ConversationStep[];
	components: string[];
	isCompleted: boolean;
}

// Arduino Leonardo LED Dimmer Conversation
export const leonardoLedDimmerConversation: Conversation = {
	id: 'leonardo-led-dimmer',
	projectType: 'led-dimmer',
	title: 'Arduino Leonardo LED Dimmer',
	description: 'Build a LED brightness controller using an Arduino Leonardo, potentiometer, and LED',
	currentStep: 0,
	isCompleted: false,
	components: ['leonardo-keyestudio', 'breadboard', 'leuchtdiode', 'widerstand', 'poti', 'jumpercable'],
	steps: [
		{
			id: 'component-analysis',
			type: 'ai',
			content: `Perfekt! F√ºr dieses LED-Dimmer Projekt mit einem Arduino Leonardo ben√∂tigen Sie folgende Komponenten:

**Komponenten Liste:**

üî∏ **Arduino Leonardo (Keyestudio)** - Der Hauptcontroller
üî∏ **Breadboard** - F√ºr die Schaltungsaufbau  
üî∏ **LED (Diode)** - Die Leuchtdiode die gedimmt werden soll
üî∏ **Resistor (Widerstand)** - Schutz f√ºr die LED (220Œ© empfohlen)
üî∏ **Potentiometer** - Zur Helligkeitsregelung der LED
üî∏ **Jumper Cables** - Verbindungskabel f√ºr die Schaltung

**√úber das Projekt:**
Diese Schaltung erm√∂glicht es Ihnen, die Helligkeit einer LED stufenlos √ºber ein Potentiometer zu regulieren. Der Arduino Leonardo liest den analogen Wert des Potentiometers ein und wandelt ihn in ein PWM-Signal um, das die LED entsprechend dimmt.`,
			componentImages: [
				'/components/leonardoKeyestudio.png',
				'/components/jumpercable.png', 
				'/components/leuchtdiode.png',
				'/components/widerstand.png',
				'/components/poti.png',
				'/components/breadboard.png'
			],
			nextSteps: ['user-confirms-components'],
			isCompleted: false
		},
		{
			id: 'user-confirms-components',
			type: 'user',
			content: 'okay ich habe alle komponenten',
			userResponse: 'okay ich habe alle komponenten',
			nextSteps: ['code-preparation'],
			isCompleted: false
		},
		{
			id: 'code-preparation',
			type: 'ai',
			content: `Ausgezeichnet! Alle Komponenten sind verf√ºgbar. Wir k√∂nnen jetzt mit der Schritt-f√ºr-Schritt Programmierung beginnen.

**Was wir programmieren werden:**
1. **Pin-Konfiguration** - Potentiometer und LED Pins definieren
2. **Setup-Funktion** - Initialisierung der Hardware
3. **Analoges Einlesen** - Potentiometer-Werte erfassen
4. **PWM-Steuerung** - LED-Helligkeit per PWM regulieren
5. **Mapping & Debugging** - Werte umrechnen und √ºberwachen

Sollen wir mit der Code-Implementierung beginnen?`,
			nextSteps: ['start-coding'],
			showTutorialButton: true,
			isCompleted: false
		},
		{
			id: 'start-coding',
			type: 'ai',
			content: `Perfekt! Der Code ist fertig und bereit zum Hochladen auf Ihren Arduino Leonardo.

**N√§chste Schritte:**
Jetzt sind wir bereit f√ºr die praktische Umsetzung! M√∂chten Sie:

üîπ **Circuit Designer** - Die Schaltung hier virtuell aufbauen und testen
üîπ **Realer Tisch** - Direkt zur physischen Umsetzung am Arbeitsplatz wechseln

Wie m√∂chten Sie fortfahren?`,
			nextSteps: ['circuit-designer', 'real-workspace'],
			isCompleted: false
		}
	]
};

// Code Tutorial Steps f√ºr interaktive IDE-Anleitung
export interface CodeTutorialStep {
	id: string;
	title: string;
	description: string;
	code: string;
	explanation: string;
	highlight?: { start: number; end: number };
}

export const leonardoCodeTutorial: CodeTutorialStep[] = [
	{
		id: 'step-1-setup',
		title: 'Schritt 1: Grundstruktur & Kommentare',
		description: 'Lassen Sie uns mit der Grundstruktur und Dokumentation beginnen.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/`,
		explanation: 'Ein guter Code beginnt immer mit Dokumentation. Hier definieren wir was unser Projekt macht und welche Hardware verwendet wird.'
	},
	{
		id: 'step-2-pins',
		title: 'Schritt 2: Pin-Definitionen',
		description: 'Jetzt definieren wir die Hardware-Pins f√ºr unser Projekt.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)`,
		explanation: 'Mit const int definieren wir unver√§nderliche Konstanten f√ºr unsere Pins. Pin 9 unterst√ºtzt PWM (Pulsweitenmodulation) f√ºr die LED-Helligkeitssteuerung.'
	},
	{
		id: 'step-3-setup',
		title: 'Schritt 3: Setup-Funktion',
		description: 'Die setup() Funktion l√§uft einmal beim Start des Arduino.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)

void setup() {
  // Serielle Kommunikation starten f√ºr Debugging
  Serial.begin(9600);
  
  // LED Pin als Ausgang definieren
  pinMode(ledPin, OUTPUT);
  
  // Potentiometer Pin ist automatisch als Eingang konfiguriert
  Serial.println("Arduino Leonardo LED Dimmer gestartet!");
}`,
		explanation: 'Serial.begin() startet die Kommunikation zum Computer. pinMode() konfiguriert Pin 9 als Ausgang f√ºr die LED. Analog-Pins sind automatisch Eing√§nge.'
	},
	{
		id: 'step-4-loop-basic',
		title: 'Schritt 4: Grundlegende Loop-Struktur',
		description: 'Die loop() Funktion l√§uft endlos und enth√§lt unsere Hauptlogik.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)

void setup() {
  // Serielle Kommunikation starten f√ºr Debugging
  Serial.begin(9600);
  
  // LED Pin als Ausgang definieren
  pinMode(ledPin, OUTPUT);
  
  // Potentiometer Pin ist automatisch als Eingang konfiguriert
  Serial.println("Arduino Leonardo LED Dimmer gestartet!");
}

void loop() {
  // Potentiometer-Wert lesen (0-1023)
  int potValue = analogRead(potPin);
  
  // Hier kommt die Logik...
}`,
		explanation: 'analogRead() liest den analogen Wert des Potentiometers. Der Wertebereich ist 0-1023 (10-bit Aufl√∂sung).'
	},
	{
		id: 'step-5-mapping',
		title: 'Schritt 5: Werte-Mapping f√ºr PWM',
		description: 'Wir wandeln den Potentiometer-Wert in PWM-Werte f√ºr die LED um.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)

void setup() {
  // Serielle Kommunikation starten f√ºr Debugging
  Serial.begin(9600);
  
  // LED Pin als Ausgang definieren
  pinMode(ledPin, OUTPUT);
  
  // Potentiometer Pin ist automatisch als Eingang konfiguriert
  Serial.println("Arduino Leonardo LED Dimmer gestartet!");
}

void loop() {
  // Potentiometer-Wert lesen (0-1023)
  int potValue = analogRead(potPin);
  
  // Wert auf PWM-Bereich (0-255) abbilden
  int brightness = map(potValue, 0, 1023, 0, 255);
  
  // LED-Helligkeit setzen
  analogWrite(ledPin, brightness);
}`,
		explanation: 'map() wandelt den Potentiometer-Bereich (0-1023) in PWM-Bereich (0-255) um. analogWrite() steuert die LED-Helligkeit per PWM.'
	},
	{
		id: 'step-6-debugging',
		title: 'Schritt 6: Debug-Ausgabe & Timing',
		description: 'F√ºgen wir Debug-Ausgaben und optimales Timing hinzu.',
		code: `/*
  Arduino Leonardo LED Dimmer
  Helligkeit einer LED √ºber Potentiometer steuern
  
  Hardware:
  - Arduino Leonardo
  - LED an Pin 9 (PWM-f√§hig)
  - Potentiometer an Pin A0
  - 220Œ© Widerstand f√ºr LED
*/

// Pin-Definitionen
const int potPin = A0;      // Potentiometer an Analog Pin A0
const int ledPin = 9;       // LED an Digital Pin 9 (PWM-f√§hig)

void setup() {
  // Serielle Kommunikation starten f√ºr Debugging
  Serial.begin(9600);
  
  // LED Pin als Ausgang definieren
  pinMode(ledPin, OUTPUT);
  
  // Potentiometer Pin ist automatisch als Eingang konfiguriert
  Serial.println("Arduino Leonardo LED Dimmer gestartet!");
}

void loop() {
  // Potentiometer-Wert lesen (0-1023)
  int potValue = analogRead(potPin);
  
  // Wert auf PWM-Bereich (0-255) abbilden
  int brightness = map(potValue, 0, 1023, 0, 255);
  
  // LED-Helligkeit setzen
  analogWrite(ledPin, brightness);
  
  // Debug-Ausgabe
  Serial.print("Potentiometer: ");
  Serial.print(potValue);
  Serial.print(" | LED Helligkeit: ");
  Serial.println(brightness);
  
  // Kurze Pause f√ºr stabile Werte
  delay(50);
}`,
		explanation: 'Serial.print() zeigt die aktuellen Werte im Serial Monitor. delay(50) sorgt f√ºr stabile Werte und verhindert Spam in der Ausgabe.'
	}
];

// Store f√ºr aktuelle Konversation
export const currentConversation = writable<Conversation | null>(null);

// Store f√ºr Konversationsschritt
export const conversationStep = writable<number>(0);

// Store f√ºr aktuellen Tutorial-Schritt
export const currentTutorialStep = writable<number>(0);
export const isTutorialActive = writable<boolean>(false);

// Hilfsfunktionen
export function startConversation(conversationId: string) {
	if (conversationId === 'leonardo-led-dimmer') {
		currentConversation.set(leonardoLedDimmerConversation);
		conversationStep.set(0);
	}
}

export function nextConversationStep() {
	currentConversation.update(conv => {
		if (conv && conv.currentStep < conv.steps.length - 1) {
			return {
				...conv,
				currentStep: conv.currentStep + 1
			};
		}
		return conv;
	});
	
	conversationStep.update(step => step + 1);
}

export function markStepCompleted(stepId: string) {
	currentConversation.update(conv => {
		if (conv) {
			const updatedSteps = conv.steps.map(step => 
				step.id === stepId ? { ...step, isCompleted: true } : step
			);
			return {
				...conv,
				steps: updatedSteps
			};
		}
		return conv;
	});
}

export function resetConversation() {
	currentConversation.set(null);
	conversationStep.set(0);
}

// Funktion um zu pr√ºfen ob eine Eingabe ein vordefiniertes Projekt ist
export function detectProjectType(input: string): string | null {
	const lowerInput = input.toLowerCase();
	
	// Arduino Leonardo LED Dimmer keywords
	if (lowerInput.includes('leonardo') && 
		(lowerInput.includes('led') || lowerInput.includes('diode') || lowerInput.includes('leuchtdiode')) &&
		(lowerInput.includes('dimmer') || lowerInput.includes('helligkeit') || 
		 lowerInput.includes('potentiometer') || lowerInput.includes('brightness') || 
		 lowerInput.includes('poti') || lowerInput.includes('regulieren'))) {
		return 'leonardo-led-dimmer';
	}
	
	return null;
}

// Hilfsfunktionen f√ºr Tutorial
export function startCodeTutorial() {
	currentTutorialStep.set(0);
	isTutorialActive.set(true);
}

export function nextTutorialStep() {
	currentTutorialStep.update(step => {
		if (step < leonardoCodeTutorial.length - 1) {
			return step + 1;
		}
		return step;
	});
}

export function previousTutorialStep() {
	currentTutorialStep.update(step => {
		if (step > 0) {
			return step - 1;
		}
		return step;
	});
}

export function finishTutorial() {
	isTutorialActive.set(false);
	currentTutorialStep.set(0);
}

// Funktion um den kompletten Tutorial-Code zu generieren
export function getCompleteTutorialCode(): string {
	// Return the complete code from the last tutorial step
	const lastStep = leonardoCodeTutorial[leonardoCodeTutorial.length - 1];
	return lastStep.code;
}
